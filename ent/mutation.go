// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/ugent-library/momo/ent/predicate"
	"github.com/ugent-library/momo/ent/rec"
	"github.com/ugent-library/momo/ent/representation"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeRec            = "Rec"
	TypeRepresentation = "Representation"
)

// RecMutation represents an operation that mutates the Rec nodes in the graph.
type RecMutation struct {
	config
	op                     Op
	typ                    string
	id                     *uuid.UUID
	collection             *string
	_type                  *string
	created_at             *time.Time
	updated_at             *time.Time
	metadata               *map[string]interface{}
	clearedFields          map[string]struct{}
	representations        map[uuid.UUID]struct{}
	removedrepresentations map[uuid.UUID]struct{}
	clearedrepresentations bool
	done                   bool
	oldValue               func(context.Context) (*Rec, error)
	predicates             []predicate.Rec
}

var _ ent.Mutation = (*RecMutation)(nil)

// recOption allows management of the mutation configuration using functional options.
type recOption func(*RecMutation)

// newRecMutation creates new mutation for the Rec entity.
func newRecMutation(c config, op Op, opts ...recOption) *RecMutation {
	m := &RecMutation{
		config:        c,
		op:            op,
		typ:           TypeRec,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRecID sets the ID field of the mutation.
func withRecID(id uuid.UUID) recOption {
	return func(m *RecMutation) {
		var (
			err   error
			once  sync.Once
			value *Rec
		)
		m.oldValue = func(ctx context.Context) (*Rec, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Rec.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRec sets the old Rec of the mutation.
func withRec(node *Rec) recOption {
	return func(m *RecMutation) {
		m.oldValue = func(context.Context) (*Rec, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RecMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RecMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Rec entities.
func (m *RecMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RecMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetCollection sets the "collection" field.
func (m *RecMutation) SetCollection(s string) {
	m.collection = &s
}

// Collection returns the value of the "collection" field in the mutation.
func (m *RecMutation) Collection() (r string, exists bool) {
	v := m.collection
	if v == nil {
		return
	}
	return *v, true
}

// OldCollection returns the old "collection" field's value of the Rec entity.
// If the Rec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecMutation) OldCollection(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCollection is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCollection requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCollection: %w", err)
	}
	return oldValue.Collection, nil
}

// ResetCollection resets all changes to the "collection" field.
func (m *RecMutation) ResetCollection() {
	m.collection = nil
}

// SetType sets the "type" field.
func (m *RecMutation) SetType(s string) {
	m._type = &s
}

// GetType returns the value of the "type" field in the mutation.
func (m *RecMutation) GetType() (r string, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Rec entity.
// If the Rec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecMutation) OldType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *RecMutation) ResetType() {
	m._type = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RecMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RecMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Rec entity.
// If the Rec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RecMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RecMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RecMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Rec entity.
// If the Rec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RecMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetMetadata sets the "metadata" field.
func (m *RecMutation) SetMetadata(value map[string]interface{}) {
	m.metadata = &value
}

// Metadata returns the value of the "metadata" field in the mutation.
func (m *RecMutation) Metadata() (r map[string]interface{}, exists bool) {
	v := m.metadata
	if v == nil {
		return
	}
	return *v, true
}

// OldMetadata returns the old "metadata" field's value of the Rec entity.
// If the Rec object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RecMutation) OldMetadata(ctx context.Context) (v map[string]interface{}, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldMetadata is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldMetadata requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldMetadata: %w", err)
	}
	return oldValue.Metadata, nil
}

// ResetMetadata resets all changes to the "metadata" field.
func (m *RecMutation) ResetMetadata() {
	m.metadata = nil
}

// AddRepresentationIDs adds the "representations" edge to the Representation entity by ids.
func (m *RecMutation) AddRepresentationIDs(ids ...uuid.UUID) {
	if m.representations == nil {
		m.representations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.representations[ids[i]] = struct{}{}
	}
}

// ClearRepresentations clears the "representations" edge to the Representation entity.
func (m *RecMutation) ClearRepresentations() {
	m.clearedrepresentations = true
}

// RepresentationsCleared returns if the "representations" edge to the Representation entity was cleared.
func (m *RecMutation) RepresentationsCleared() bool {
	return m.clearedrepresentations
}

// RemoveRepresentationIDs removes the "representations" edge to the Representation entity by IDs.
func (m *RecMutation) RemoveRepresentationIDs(ids ...uuid.UUID) {
	if m.removedrepresentations == nil {
		m.removedrepresentations = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.removedrepresentations[ids[i]] = struct{}{}
	}
}

// RemovedRepresentations returns the removed IDs of the "representations" edge to the Representation entity.
func (m *RecMutation) RemovedRepresentationsIDs() (ids []uuid.UUID) {
	for id := range m.removedrepresentations {
		ids = append(ids, id)
	}
	return
}

// RepresentationsIDs returns the "representations" edge IDs in the mutation.
func (m *RecMutation) RepresentationsIDs() (ids []uuid.UUID) {
	for id := range m.representations {
		ids = append(ids, id)
	}
	return
}

// ResetRepresentations resets all changes to the "representations" edge.
func (m *RecMutation) ResetRepresentations() {
	m.representations = nil
	m.clearedrepresentations = false
	m.removedrepresentations = nil
}

// Op returns the operation name.
func (m *RecMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Rec).
func (m *RecMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RecMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.collection != nil {
		fields = append(fields, rec.FieldCollection)
	}
	if m._type != nil {
		fields = append(fields, rec.FieldType)
	}
	if m.created_at != nil {
		fields = append(fields, rec.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, rec.FieldUpdatedAt)
	}
	if m.metadata != nil {
		fields = append(fields, rec.FieldMetadata)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RecMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case rec.FieldCollection:
		return m.Collection()
	case rec.FieldType:
		return m.GetType()
	case rec.FieldCreatedAt:
		return m.CreatedAt()
	case rec.FieldUpdatedAt:
		return m.UpdatedAt()
	case rec.FieldMetadata:
		return m.Metadata()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RecMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case rec.FieldCollection:
		return m.OldCollection(ctx)
	case rec.FieldType:
		return m.OldType(ctx)
	case rec.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case rec.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case rec.FieldMetadata:
		return m.OldMetadata(ctx)
	}
	return nil, fmt.Errorf("unknown Rec field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecMutation) SetField(name string, value ent.Value) error {
	switch name {
	case rec.FieldCollection:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCollection(v)
		return nil
	case rec.FieldType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case rec.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case rec.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case rec.FieldMetadata:
		v, ok := value.(map[string]interface{})
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetMetadata(v)
		return nil
	}
	return fmt.Errorf("unknown Rec field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RecMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RecMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RecMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Rec numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RecMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RecMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RecMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Rec nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RecMutation) ResetField(name string) error {
	switch name {
	case rec.FieldCollection:
		m.ResetCollection()
		return nil
	case rec.FieldType:
		m.ResetType()
		return nil
	case rec.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case rec.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case rec.FieldMetadata:
		m.ResetMetadata()
		return nil
	}
	return fmt.Errorf("unknown Rec field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RecMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.representations != nil {
		edges = append(edges, rec.EdgeRepresentations)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RecMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case rec.EdgeRepresentations:
		ids := make([]ent.Value, 0, len(m.representations))
		for id := range m.representations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RecMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedrepresentations != nil {
		edges = append(edges, rec.EdgeRepresentations)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RecMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case rec.EdgeRepresentations:
		ids := make([]ent.Value, 0, len(m.removedrepresentations))
		for id := range m.removedrepresentations {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RecMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrepresentations {
		edges = append(edges, rec.EdgeRepresentations)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RecMutation) EdgeCleared(name string) bool {
	switch name {
	case rec.EdgeRepresentations:
		return m.clearedrepresentations
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RecMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Rec unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RecMutation) ResetEdge(name string) error {
	switch name {
	case rec.EdgeRepresentations:
		m.ResetRepresentations()
		return nil
	}
	return fmt.Errorf("unknown Rec edge %s", name)
}

// RepresentationMutation represents an operation that mutates the Representation nodes in the graph.
type RepresentationMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	data          *[]byte
	created_at    *time.Time
	updated_at    *time.Time
	clearedFields map[string]struct{}
	rec           *uuid.UUID
	clearedrec    bool
	done          bool
	oldValue      func(context.Context) (*Representation, error)
	predicates    []predicate.Representation
}

var _ ent.Mutation = (*RepresentationMutation)(nil)

// representationOption allows management of the mutation configuration using functional options.
type representationOption func(*RepresentationMutation)

// newRepresentationMutation creates new mutation for the Representation entity.
func newRepresentationMutation(c config, op Op, opts ...representationOption) *RepresentationMutation {
	m := &RepresentationMutation{
		config:        c,
		op:            op,
		typ:           TypeRepresentation,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withRepresentationID sets the ID field of the mutation.
func withRepresentationID(id uuid.UUID) representationOption {
	return func(m *RepresentationMutation) {
		var (
			err   error
			once  sync.Once
			value *Representation
		)
		m.oldValue = func(ctx context.Context) (*Representation, error) {
			once.Do(func() {
				if m.done {
					err = fmt.Errorf("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Representation.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withRepresentation sets the old Representation of the mutation.
func withRepresentation(node *Representation) representationOption {
	return func(m *RepresentationMutation) {
		m.oldValue = func(context.Context) (*Representation, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m RepresentationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m RepresentationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, fmt.Errorf("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Representation entities.
func (m *RepresentationMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID
// is only available if it was provided to the builder.
func (m *RepresentationMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// SetName sets the "name" field.
func (m *RepresentationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *RepresentationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Representation entity.
// If the Representation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepresentationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *RepresentationMutation) ResetName() {
	m.name = nil
}

// SetData sets the "data" field.
func (m *RepresentationMutation) SetData(b []byte) {
	m.data = &b
}

// Data returns the value of the "data" field in the mutation.
func (m *RepresentationMutation) Data() (r []byte, exists bool) {
	v := m.data
	if v == nil {
		return
	}
	return *v, true
}

// OldData returns the old "data" field's value of the Representation entity.
// If the Representation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepresentationMutation) OldData(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldData: %w", err)
	}
	return oldValue.Data, nil
}

// ResetData resets all changes to the "data" field.
func (m *RepresentationMutation) ResetData() {
	m.data = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *RepresentationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *RepresentationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Representation entity.
// If the Representation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepresentationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *RepresentationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *RepresentationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *RepresentationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Representation entity.
// If the Representation object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *RepresentationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, fmt.Errorf("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, fmt.Errorf("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *RepresentationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetRecID sets the "rec" edge to the Rec entity by id.
func (m *RepresentationMutation) SetRecID(id uuid.UUID) {
	m.rec = &id
}

// ClearRec clears the "rec" edge to the Rec entity.
func (m *RepresentationMutation) ClearRec() {
	m.clearedrec = true
}

// RecCleared returns if the "rec" edge to the Rec entity was cleared.
func (m *RepresentationMutation) RecCleared() bool {
	return m.clearedrec
}

// RecID returns the "rec" edge ID in the mutation.
func (m *RepresentationMutation) RecID() (id uuid.UUID, exists bool) {
	if m.rec != nil {
		return *m.rec, true
	}
	return
}

// RecIDs returns the "rec" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// RecID instead. It exists only for internal usage by the builders.
func (m *RepresentationMutation) RecIDs() (ids []uuid.UUID) {
	if id := m.rec; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetRec resets all changes to the "rec" edge.
func (m *RepresentationMutation) ResetRec() {
	m.rec = nil
	m.clearedrec = false
}

// Op returns the operation name.
func (m *RepresentationMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Representation).
func (m *RepresentationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *RepresentationMutation) Fields() []string {
	fields := make([]string, 0, 4)
	if m.name != nil {
		fields = append(fields, representation.FieldName)
	}
	if m.data != nil {
		fields = append(fields, representation.FieldData)
	}
	if m.created_at != nil {
		fields = append(fields, representation.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, representation.FieldUpdatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *RepresentationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case representation.FieldName:
		return m.Name()
	case representation.FieldData:
		return m.Data()
	case representation.FieldCreatedAt:
		return m.CreatedAt()
	case representation.FieldUpdatedAt:
		return m.UpdatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *RepresentationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case representation.FieldName:
		return m.OldName(ctx)
	case representation.FieldData:
		return m.OldData(ctx)
	case representation.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case representation.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Representation field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepresentationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case representation.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case representation.FieldData:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetData(v)
		return nil
	case representation.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case representation.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Representation field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *RepresentationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *RepresentationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *RepresentationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Representation numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *RepresentationMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *RepresentationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *RepresentationMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Representation nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *RepresentationMutation) ResetField(name string) error {
	switch name {
	case representation.FieldName:
		m.ResetName()
		return nil
	case representation.FieldData:
		m.ResetData()
		return nil
	case representation.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case representation.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	}
	return fmt.Errorf("unknown Representation field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *RepresentationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.rec != nil {
		edges = append(edges, representation.EdgeRec)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *RepresentationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case representation.EdgeRec:
		if id := m.rec; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *RepresentationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *RepresentationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *RepresentationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedrec {
		edges = append(edges, representation.EdgeRec)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *RepresentationMutation) EdgeCleared(name string) bool {
	switch name {
	case representation.EdgeRec:
		return m.clearedrec
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *RepresentationMutation) ClearEdge(name string) error {
	switch name {
	case representation.EdgeRec:
		m.ClearRec()
		return nil
	}
	return fmt.Errorf("unknown Representation unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *RepresentationMutation) ResetEdge(name string) error {
	switch name {
	case representation.EdgeRec:
		m.ResetRec()
		return nil
	}
	return fmt.Errorf("unknown Representation edge %s", name)
}
