// Code generated by entc, DO NOT EDIT.

package rec

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/ugent-library/momo/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Collection applies equality check predicate on the "collection" field. It's identical to CollectionEQ.
func Collection(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollection), v))
	})
}

// Type applies equality check predicate on the "type" field. It's identical to TypeEQ.
func Type(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// SourceID applies equality check predicate on the "source_id" field. It's identical to SourceIDEQ.
func SourceID(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceID), v))
	})
}

// SourceFormat applies equality check predicate on the "source_format" field. It's identical to SourceFormatEQ.
func SourceFormat(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceFormat), v))
	})
}

// SourceMetadata applies equality check predicate on the "source_metadata" field. It's identical to SourceMetadataEQ.
func SourceMetadata(v []byte) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceMetadata), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CollectionEQ applies the EQ predicate on the "collection" field.
func CollectionEQ(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCollection), v))
	})
}

// CollectionNEQ applies the NEQ predicate on the "collection" field.
func CollectionNEQ(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCollection), v))
	})
}

// CollectionIn applies the In predicate on the "collection" field.
func CollectionIn(vs ...string) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCollection), v...))
	})
}

// CollectionNotIn applies the NotIn predicate on the "collection" field.
func CollectionNotIn(vs ...string) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCollection), v...))
	})
}

// CollectionGT applies the GT predicate on the "collection" field.
func CollectionGT(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCollection), v))
	})
}

// CollectionGTE applies the GTE predicate on the "collection" field.
func CollectionGTE(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCollection), v))
	})
}

// CollectionLT applies the LT predicate on the "collection" field.
func CollectionLT(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCollection), v))
	})
}

// CollectionLTE applies the LTE predicate on the "collection" field.
func CollectionLTE(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCollection), v))
	})
}

// CollectionContains applies the Contains predicate on the "collection" field.
func CollectionContains(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCollection), v))
	})
}

// CollectionHasPrefix applies the HasPrefix predicate on the "collection" field.
func CollectionHasPrefix(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCollection), v))
	})
}

// CollectionHasSuffix applies the HasSuffix predicate on the "collection" field.
func CollectionHasSuffix(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCollection), v))
	})
}

// CollectionEqualFold applies the EqualFold predicate on the "collection" field.
func CollectionEqualFold(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCollection), v))
	})
}

// CollectionContainsFold applies the ContainsFold predicate on the "collection" field.
func CollectionContainsFold(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCollection), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...string) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...string) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// TypeGT applies the GT predicate on the "type" field.
func TypeGT(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldType), v))
	})
}

// TypeGTE applies the GTE predicate on the "type" field.
func TypeGTE(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldType), v))
	})
}

// TypeLT applies the LT predicate on the "type" field.
func TypeLT(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldType), v))
	})
}

// TypeLTE applies the LTE predicate on the "type" field.
func TypeLTE(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldType), v))
	})
}

// TypeContains applies the Contains predicate on the "type" field.
func TypeContains(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldType), v))
	})
}

// TypeHasPrefix applies the HasPrefix predicate on the "type" field.
func TypeHasPrefix(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldType), v))
	})
}

// TypeHasSuffix applies the HasSuffix predicate on the "type" field.
func TypeHasSuffix(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldType), v))
	})
}

// TypeEqualFold applies the EqualFold predicate on the "type" field.
func TypeEqualFold(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldType), v))
	})
}

// TypeContainsFold applies the ContainsFold predicate on the "type" field.
func TypeContainsFold(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldType), v))
	})
}

// SourceIDEQ applies the EQ predicate on the "source_id" field.
func SourceIDEQ(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceID), v))
	})
}

// SourceIDNEQ applies the NEQ predicate on the "source_id" field.
func SourceIDNEQ(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceID), v))
	})
}

// SourceIDIn applies the In predicate on the "source_id" field.
func SourceIDIn(vs ...string) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceID), v...))
	})
}

// SourceIDNotIn applies the NotIn predicate on the "source_id" field.
func SourceIDNotIn(vs ...string) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceID), v...))
	})
}

// SourceIDGT applies the GT predicate on the "source_id" field.
func SourceIDGT(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceID), v))
	})
}

// SourceIDGTE applies the GTE predicate on the "source_id" field.
func SourceIDGTE(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceID), v))
	})
}

// SourceIDLT applies the LT predicate on the "source_id" field.
func SourceIDLT(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceID), v))
	})
}

// SourceIDLTE applies the LTE predicate on the "source_id" field.
func SourceIDLTE(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceID), v))
	})
}

// SourceIDContains applies the Contains predicate on the "source_id" field.
func SourceIDContains(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceID), v))
	})
}

// SourceIDHasPrefix applies the HasPrefix predicate on the "source_id" field.
func SourceIDHasPrefix(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceID), v))
	})
}

// SourceIDHasSuffix applies the HasSuffix predicate on the "source_id" field.
func SourceIDHasSuffix(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceID), v))
	})
}

// SourceIDEqualFold applies the EqualFold predicate on the "source_id" field.
func SourceIDEqualFold(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceID), v))
	})
}

// SourceIDContainsFold applies the ContainsFold predicate on the "source_id" field.
func SourceIDContainsFold(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceID), v))
	})
}

// SourceFormatEQ applies the EQ predicate on the "source_format" field.
func SourceFormatEQ(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatNEQ applies the NEQ predicate on the "source_format" field.
func SourceFormatNEQ(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatIn applies the In predicate on the "source_format" field.
func SourceFormatIn(vs ...string) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceFormat), v...))
	})
}

// SourceFormatNotIn applies the NotIn predicate on the "source_format" field.
func SourceFormatNotIn(vs ...string) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceFormat), v...))
	})
}

// SourceFormatGT applies the GT predicate on the "source_format" field.
func SourceFormatGT(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatGTE applies the GTE predicate on the "source_format" field.
func SourceFormatGTE(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatLT applies the LT predicate on the "source_format" field.
func SourceFormatLT(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatLTE applies the LTE predicate on the "source_format" field.
func SourceFormatLTE(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatContains applies the Contains predicate on the "source_format" field.
func SourceFormatContains(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatHasPrefix applies the HasPrefix predicate on the "source_format" field.
func SourceFormatHasPrefix(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatHasSuffix applies the HasSuffix predicate on the "source_format" field.
func SourceFormatHasSuffix(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatIsNil applies the IsNil predicate on the "source_format" field.
func SourceFormatIsNil() predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceFormat)))
	})
}

// SourceFormatNotNil applies the NotNil predicate on the "source_format" field.
func SourceFormatNotNil() predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceFormat)))
	})
}

// SourceFormatEqualFold applies the EqualFold predicate on the "source_format" field.
func SourceFormatEqualFold(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSourceFormat), v))
	})
}

// SourceFormatContainsFold applies the ContainsFold predicate on the "source_format" field.
func SourceFormatContainsFold(v string) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSourceFormat), v))
	})
}

// SourceMetadataEQ applies the EQ predicate on the "source_metadata" field.
func SourceMetadataEQ(v []byte) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSourceMetadata), v))
	})
}

// SourceMetadataNEQ applies the NEQ predicate on the "source_metadata" field.
func SourceMetadataNEQ(v []byte) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSourceMetadata), v))
	})
}

// SourceMetadataIn applies the In predicate on the "source_metadata" field.
func SourceMetadataIn(vs ...[]byte) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSourceMetadata), v...))
	})
}

// SourceMetadataNotIn applies the NotIn predicate on the "source_metadata" field.
func SourceMetadataNotIn(vs ...[]byte) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSourceMetadata), v...))
	})
}

// SourceMetadataGT applies the GT predicate on the "source_metadata" field.
func SourceMetadataGT(v []byte) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSourceMetadata), v))
	})
}

// SourceMetadataGTE applies the GTE predicate on the "source_metadata" field.
func SourceMetadataGTE(v []byte) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSourceMetadata), v))
	})
}

// SourceMetadataLT applies the LT predicate on the "source_metadata" field.
func SourceMetadataLT(v []byte) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSourceMetadata), v))
	})
}

// SourceMetadataLTE applies the LTE predicate on the "source_metadata" field.
func SourceMetadataLTE(v []byte) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSourceMetadata), v))
	})
}

// SourceMetadataIsNil applies the IsNil predicate on the "source_metadata" field.
func SourceMetadataIsNil() predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldSourceMetadata)))
	})
}

// SourceMetadataNotNil applies the NotNil predicate on the "source_metadata" field.
func SourceMetadataNotNil() predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldSourceMetadata)))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Rec {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Rec(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// HasRepresentations applies the HasEdge predicate on the "representations" edge.
func HasRepresentations() predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepresentationsTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepresentationsTable, RepresentationsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasRepresentationsWith applies the HasEdge predicate on the "representations" edge with a given conditions (other predicates).
func HasRepresentationsWith(preds ...predicate.Representation) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(RepresentationsInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, RepresentationsTable, RepresentationsColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Rec) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Rec) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Rec) predicate.Rec {
	return predicate.Rec(func(s *sql.Selector) {
		p(s.Not())
	})
}
