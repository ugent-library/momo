// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/ugent-library/momo/ent/predicate"
	"github.com/ugent-library/momo/ent/rec"
	"github.com/ugent-library/momo/ent/representation"
)

// RecUpdate is the builder for updating Rec entities.
type RecUpdate struct {
	config
	hooks    []Hook
	mutation *RecMutation
}

// Where adds a new predicate for the RecUpdate builder.
func (ru *RecUpdate) Where(ps ...predicate.Rec) *RecUpdate {
	ru.mutation.predicates = append(ru.mutation.predicates, ps...)
	return ru
}

// SetCollection sets the "collection" field.
func (ru *RecUpdate) SetCollection(s string) *RecUpdate {
	ru.mutation.SetCollection(s)
	return ru
}

// SetType sets the "type" field.
func (ru *RecUpdate) SetType(s string) *RecUpdate {
	ru.mutation.SetType(s)
	return ru
}

// SetMetadata sets the "metadata" field.
func (ru *RecUpdate) SetMetadata(m map[string]interface{}) *RecUpdate {
	ru.mutation.SetMetadata(m)
	return ru
}

// SetSource sets the "source" field.
func (ru *RecUpdate) SetSource(b []byte) *RecUpdate {
	ru.mutation.SetSource(b)
	return ru
}

// ClearSource clears the value of the "source" field.
func (ru *RecUpdate) ClearSource() *RecUpdate {
	ru.mutation.ClearSource()
	return ru
}

// AddRepresentationIDs adds the "representations" edge to the Representation entity by IDs.
func (ru *RecUpdate) AddRepresentationIDs(ids ...uuid.UUID) *RecUpdate {
	ru.mutation.AddRepresentationIDs(ids...)
	return ru
}

// AddRepresentations adds the "representations" edges to the Representation entity.
func (ru *RecUpdate) AddRepresentations(r ...*Representation) *RecUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.AddRepresentationIDs(ids...)
}

// Mutation returns the RecMutation object of the builder.
func (ru *RecUpdate) Mutation() *RecMutation {
	return ru.mutation
}

// ClearRepresentations clears all "representations" edges to the Representation entity.
func (ru *RecUpdate) ClearRepresentations() *RecUpdate {
	ru.mutation.ClearRepresentations()
	return ru
}

// RemoveRepresentationIDs removes the "representations" edge to Representation entities by IDs.
func (ru *RecUpdate) RemoveRepresentationIDs(ids ...uuid.UUID) *RecUpdate {
	ru.mutation.RemoveRepresentationIDs(ids...)
	return ru
}

// RemoveRepresentations removes "representations" edges to Representation entities.
func (ru *RecUpdate) RemoveRepresentations(r ...*Representation) *RecUpdate {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ru.RemoveRepresentationIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RecUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	ru.defaults()
	if len(ru.hooks) == 0 {
		if err = ru.check(); err != nil {
			return 0, err
		}
		affected, err = ru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ru.check(); err != nil {
				return 0, err
			}
			ru.mutation = mutation
			affected, err = ru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ru.hooks) - 1; i >= 0; i-- {
			mut = ru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RecUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RecUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RecUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RecUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := rec.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RecUpdate) check() error {
	if v, ok := ru.mutation.Collection(); ok {
		if err := rec.CollectionValidator(v); err != nil {
			return &ValidationError{Name: "collection", err: fmt.Errorf("ent: validator failed for field \"collection\": %w", err)}
		}
	}
	if v, ok := ru.mutation.GetType(); ok {
		if err := rec.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (ru *RecUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rec.Table,
			Columns: rec.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rec.FieldID,
			},
		},
	}
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Collection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rec.FieldCollection,
		})
	}
	if value, ok := ru.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rec.FieldType,
		})
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rec.FieldUpdatedAt,
		})
	}
	if value, ok := ru.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rec.FieldMetadata,
		})
	}
	if value, ok := ru.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: rec.FieldSource,
		})
	}
	if ru.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: rec.FieldSource,
		})
	}
	if ru.mutation.RepresentationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rec.RepresentationsTable,
			Columns: []string{rec.RepresentationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: representation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedRepresentationsIDs(); len(nodes) > 0 && !ru.mutation.RepresentationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rec.RepresentationsTable,
			Columns: []string{rec.RepresentationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: representation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RepresentationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rec.RepresentationsTable,
			Columns: []string{rec.RepresentationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: representation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rec.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return 0, err
	}
	return n, nil
}

// RecUpdateOne is the builder for updating a single Rec entity.
type RecUpdateOne struct {
	config
	hooks    []Hook
	mutation *RecMutation
}

// SetCollection sets the "collection" field.
func (ruo *RecUpdateOne) SetCollection(s string) *RecUpdateOne {
	ruo.mutation.SetCollection(s)
	return ruo
}

// SetType sets the "type" field.
func (ruo *RecUpdateOne) SetType(s string) *RecUpdateOne {
	ruo.mutation.SetType(s)
	return ruo
}

// SetMetadata sets the "metadata" field.
func (ruo *RecUpdateOne) SetMetadata(m map[string]interface{}) *RecUpdateOne {
	ruo.mutation.SetMetadata(m)
	return ruo
}

// SetSource sets the "source" field.
func (ruo *RecUpdateOne) SetSource(b []byte) *RecUpdateOne {
	ruo.mutation.SetSource(b)
	return ruo
}

// ClearSource clears the value of the "source" field.
func (ruo *RecUpdateOne) ClearSource() *RecUpdateOne {
	ruo.mutation.ClearSource()
	return ruo
}

// AddRepresentationIDs adds the "representations" edge to the Representation entity by IDs.
func (ruo *RecUpdateOne) AddRepresentationIDs(ids ...uuid.UUID) *RecUpdateOne {
	ruo.mutation.AddRepresentationIDs(ids...)
	return ruo
}

// AddRepresentations adds the "representations" edges to the Representation entity.
func (ruo *RecUpdateOne) AddRepresentations(r ...*Representation) *RecUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.AddRepresentationIDs(ids...)
}

// Mutation returns the RecMutation object of the builder.
func (ruo *RecUpdateOne) Mutation() *RecMutation {
	return ruo.mutation
}

// ClearRepresentations clears all "representations" edges to the Representation entity.
func (ruo *RecUpdateOne) ClearRepresentations() *RecUpdateOne {
	ruo.mutation.ClearRepresentations()
	return ruo
}

// RemoveRepresentationIDs removes the "representations" edge to Representation entities by IDs.
func (ruo *RecUpdateOne) RemoveRepresentationIDs(ids ...uuid.UUID) *RecUpdateOne {
	ruo.mutation.RemoveRepresentationIDs(ids...)
	return ruo
}

// RemoveRepresentations removes "representations" edges to Representation entities.
func (ruo *RecUpdateOne) RemoveRepresentations(r ...*Representation) *RecUpdateOne {
	ids := make([]uuid.UUID, len(r))
	for i := range r {
		ids[i] = r[i].ID
	}
	return ruo.RemoveRepresentationIDs(ids...)
}

// Save executes the query and returns the updated Rec entity.
func (ruo *RecUpdateOne) Save(ctx context.Context) (*Rec, error) {
	var (
		err  error
		node *Rec
	)
	ruo.defaults()
	if len(ruo.hooks) == 0 {
		if err = ruo.check(); err != nil {
			return nil, err
		}
		node, err = ruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*RecMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ruo.check(); err != nil {
				return nil, err
			}
			ruo.mutation = mutation
			node, err = ruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(ruo.hooks) - 1; i >= 0; i-- {
			mut = ruo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ruo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RecUpdateOne) SaveX(ctx context.Context) *Rec {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RecUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RecUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RecUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := rec.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RecUpdateOne) check() error {
	if v, ok := ruo.mutation.Collection(); ok {
		if err := rec.CollectionValidator(v); err != nil {
			return &ValidationError{Name: "collection", err: fmt.Errorf("ent: validator failed for field \"collection\": %w", err)}
		}
	}
	if v, ok := ruo.mutation.GetType(); ok {
		if err := rec.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf("ent: validator failed for field \"type\": %w", err)}
		}
	}
	return nil
}

func (ruo *RecUpdateOne) sqlSave(ctx context.Context) (_node *Rec, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   rec.Table,
			Columns: rec.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: rec.FieldID,
			},
		},
	}
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Rec.ID for update")}
	}
	_spec.Node.ID.Value = id
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Collection(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rec.FieldCollection,
		})
	}
	if value, ok := ruo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: rec.FieldType,
		})
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: rec.FieldUpdatedAt,
		})
	}
	if value, ok := ruo.mutation.Metadata(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: rec.FieldMetadata,
		})
	}
	if value, ok := ruo.mutation.Source(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Value:  value,
			Column: rec.FieldSource,
		})
	}
	if ruo.mutation.SourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeBytes,
			Column: rec.FieldSource,
		})
	}
	if ruo.mutation.RepresentationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rec.RepresentationsTable,
			Columns: []string{rec.RepresentationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: representation.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedRepresentationsIDs(); len(nodes) > 0 && !ruo.mutation.RepresentationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rec.RepresentationsTable,
			Columns: []string{rec.RepresentationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: representation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RepresentationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   rec.RepresentationsTable,
			Columns: []string{rec.RepresentationsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: representation.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Rec{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rec.Label}
		} else if cerr, ok := isSQLConstraintError(err); ok {
			err = cerr
		}
		return nil, err
	}
	return _node, nil
}
