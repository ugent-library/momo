// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/ugent-library/momo/ent/rec"
	"github.com/ugent-library/momo/ent/representation"
)

// Representation is the model entity for the Representation schema.
type Representation struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Data holds the value of the "data" field.
	Data []byte `json:"data,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RepresentationQuery when eager-loading is set.
	Edges               RepresentationEdges `json:"edges"`
	rec_representations *uuid.UUID
}

// RepresentationEdges holds the relations/edges for other nodes in the graph.
type RepresentationEdges struct {
	// Rec holds the value of the rec edge.
	Rec *Rec `json:"rec,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// RecOrErr returns the Rec value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RepresentationEdges) RecOrErr() (*Rec, error) {
	if e.loadedTypes[0] {
		if e.Rec == nil {
			// The edge rec was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: rec.Label}
		}
		return e.Rec, nil
	}
	return nil, &NotLoadedError{edge: "rec"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Representation) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case representation.FieldData:
			values[i] = &[]byte{}
		case representation.FieldName:
			values[i] = &sql.NullString{}
		case representation.FieldCreatedAt, representation.FieldUpdatedAt:
			values[i] = &sql.NullTime{}
		case representation.FieldID:
			values[i] = &uuid.UUID{}
		case representation.ForeignKeys[0]: // rec_representations
			values[i] = &uuid.UUID{}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Representation", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Representation fields.
func (r *Representation) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case representation.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				r.ID = *value
			}
		case representation.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case representation.FieldData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field data", values[i])
			} else if value != nil {
				r.Data = *value
			}
		case representation.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case representation.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case representation.ForeignKeys[0]:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field rec_representations", values[i])
			} else if value != nil {
				r.rec_representations = value
			}
		}
	}
	return nil
}

// QueryRec queries the "rec" edge of the Representation entity.
func (r *Representation) QueryRec() *RecQuery {
	return (&RepresentationClient{config: r.config}).QueryRec(r)
}

// Update returns a builder for updating this Representation.
// Note that you need to call Representation.Unwrap() before calling this method if this Representation
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Representation) Update() *RepresentationUpdateOne {
	return (&RepresentationClient{config: r.config}).UpdateOne(r)
}

// Unwrap unwraps the Representation entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Representation) Unwrap() *Representation {
	tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Representation is not a transactional entity")
	}
	r.config.driver = tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Representation) String() string {
	var builder strings.Builder
	builder.WriteString("Representation(")
	builder.WriteString(fmt.Sprintf("id=%v", r.ID))
	builder.WriteString(", name=")
	builder.WriteString(r.Name)
	builder.WriteString(", data=")
	builder.WriteString(fmt.Sprintf("%v", r.Data))
	builder.WriteString(", created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Representations is a parsable slice of Representation.
type Representations []*Representation

func (r Representations) config(cfg config) {
	for _i := range r {
		r[_i].config = cfg
	}
}
